# kubetpl:syntax:go-template

# kubetpl:set:ENABLE_GALLEY=false
# kubetpl:set:GALLEY_REPLICAS=10
# kubetpl:set:PILOT_REPLICAS=20
# kubetpl:set:GATEWAY_REPLICAS=20
# kubetpl:set:ENABLE_MTLS=false
# kubetpl:set:ENABLE_TELEMETRY=false
---
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: default
  values:
    tracing:
      enabled: true
      provider: jaeger
    global:
      controlPlaneSecurityEnabled: {{ if (eq .ENABLE_GALLEY "true") }} false {{ else }} true {{ end }}
      mtls:
        auto: {{ .ENABLE_MTLS }}
    telemetry:
      enabled: {{ .ENABLE_TELEMETRY }}
      v1:
        enabled: {{ .ENABLE_TELEMETRY }}
      v2:
        enabled: {{ .ENABLE_TELEMETRY }}
    gateways:
      istio-ingressgateway:
        autoscaleEnabled: false
        replicaCount: {{ .GATEWAY_REPLICAS }}
        tolerations:
        - key: "scalers.istio"
          operator: "Equal"
          value: "dedicated"
          effect: "NoSchedule"
        nodeSelector:
          scalers.istio: dedicated
        podAntiAffinityTermLabelSelector:
        - key: istio
          operator: In
          values: ingressgateway
          topologyKey: "kubernetes.io/hostname"

    pilot:
      autoscaleEnabled: false
      replicaCount: {{ .PILOT_REPLICAS }}
      tolerations:
      - key: "scalers.istio"
        operator: "Equal"
        value: "dedicated"
        effect: "NoSchedule"
      nodeSelector:
        scalers.istio: dedicated
      podAntiAffinityTermLabelSelector:
      - key: istio
        operator: In
        values: pilot
        topologyKey: "kubernetes.io/hostname"

    # galley:
    #   enabled: {{ .ENABLE_GALLEY }}
    #   replicaCount: {{ .GALLEY_REPLICAS }}
    #   tolerations:
    #   - key: "scalers.istio"
    #     operator: "Equal"
    #     value: "dedicated"
    #     effect: "NoSchedule"
    #   nodeSelector:
    #     scalers.istio: dedicated
    #   podAntiAffinityTermLabelSelector:
    #   - key: istio
    #     operator: In
    #     values: galley
    #     topologyKey: "kubernetes.io/hostname"

    grafana:
      enabled: true
      nodeSelector:
        scalers.istio: prometheus
      tolerations:
      - key: "scalers.istio"
        operator: "Equal"
        value: "prometheus"
        effect: "NoSchedule"
    prometheus:
      nodeSelector:
        scalers.istio: prometheus
      tolerations:
      - key: "scalers.istio"
        operator: "Equal"
        value: "prometheus"
        effect: "NoSchedule"
  components:
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        replicaCount: {{ .GATEWAY_REPLICAS }}
        env:
          - name: ISTIO_META_ROUTER_MODE
            value: "standard"
        overlays:
          - apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
            patches:
            - path: .spec.template.spec.containers[name:istio-proxy].image
              value: gcr.io/cf-routing-desserts/proxyv2:1.6.4
        #     - path: .spec.template.spec.containers[name:istio-proxy].volumes[name:custom-bootstrap-config]
        #       value:
        #         name: custom-bootstrap-config
        #         configMap:
        #           name: custom-bootstrap-config
        #   - apiVersion: apps/v1                                                                                                                                                               │·························
        #     kind: Deployment
        #     name: istio-ingressgateway
        #     patches:
        #     - path: .spec.template.spec.containers[name:istio-proxy].volumeMounts[name:custom-bootstrap-config]
        #       value:
        #         name: custom-bootstrap-config
        #         mountPath: /etc/istio/custom-config
        #   - apiVersion: apps/v1                                                                                                                                                               │·························
        #     kind: Deployment
        #     name: istio-ingressgateway
        #     patches:
        #     - path: .spec.template.spec.containers[name:istio-proxy].args
        #       value:
        #         - proxy
        #         - router
        #         - --domain
        #         - $(POD_NAMESPACE).svc.cluster.local
        #         - --proxyLogLevel=warning
        #         - --proxyComponentLogLevel=misc:error
        #         - --log_output_level=default:info
        #         - --serviceCluster
        #         - istio-ingressgateway
        #         - --trust-domain=cluster.local
        #         - --customConfigFile /etc/istio/custom-config/envoy-bootstrap.json
    pilot:
      k8s:
        replicaCount: {{ .PILOT_REPLICAS }}
        overlays:
          - apiVersion: apps/v1                                                                                                                                                               │·························
            kind: Deployment
            name: istiod
            patches:
            - path: .spec.template.spec.containers[name:discovery].image
              value: gcr.io/cf-routing-desserts/pilot:1.6.5
            - path: .spec.template.spec.containers[name:discovery].imagePullPolicy
              value: Always
        env:
          - name: JAEGER_SERVICE_NAME
            value: "pilot"
          - name: JAEGER_AGENT_HOST
            value: "jaeger-agent.istio-system"
          - name: JAEGER_AGENT_PORT
            value: "6831"
          - name: JAEGER_SAMPLER_TYPE
            value: const
          - name: JAEGER_SAMPLER_PARAM
            value: "1"
          - name: JAEGER_REPORTER_LOG_SPANS
            value: "true"
    galley:
      enabled: {{ .ENABLE_GALLEY }}
      k8s:
        replicaCount: {{ .GALLEY_REPLICAS }}

    sidecarInjector:
      enabled: true
